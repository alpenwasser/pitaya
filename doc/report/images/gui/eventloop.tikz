\tikzsetnextfilename{gui-eventloop}
\begin{tikzpicture}[%
        align=center,
        text=q1,
        draw=sq5,
    ]
    \small
    \sffamily

    \begin{scope}[
        every node/.style = draw,
        terminal/.append style={
            rounded rectangle,
            fill=sq5,
            text=q1,
            inner sep=2mm,
        }, % data packages
        sign/.style={
            inner sep=2mm,
            rounded corners=1mm,
            fill=sq5,
            text=q1,
        },         % custom signal style
        circ/.style={
            inner sep=2mm,
            rounded corners=1mm,
            double,
            fill=sq5,
            draw=q1,
            text=q1,
            minimum width=24mm,
            minimum height=24mm
        }, % circuitry
        proc/.style={
            inner sep=2mm,
            rounded corners=1mm,
            fill=sq5,
            text=q1,
        },       % process/activity
        dec/.style={
            inner sep=2mm,
            rounded corners=1mm,
            fill=sq5,
            text=q1,
            minimum width=33mm,
            minimum height=33mm,
        },       % decision/activity
        stor/.style={
            fill=cyan!30,
            minimum width=24mm,
            minimum height=24mm
        },         % storage
        dbtable/.style={
            text=sq5,
            draw=q1,
            rounded corners=1mm,
            inner sep=2mm,
        } % database tables
    ]
        \node (newMessage) [
            dec,
            diamond,
            align=center,
        ] at (0,0) {New\\message\\received?};

        \node (openEvent) [
            dec,
            align=center,
            diamond,
            above=of newMessage,
            minimum width=33mm,
            minimum height=33mm,
        ] {open\\event\\happened\\?};

        \node (event) [
            proc,
            above=of openEvent,
            align=center,
        ] {New event};

        \node (eventLoop) [
            circ,
            left=of event,
            align=center,
        ] {Event Loop};

        \node (closeEvent) [
            dec,
            align=center,
            diamond,
            below=of newMessage,
            minimum width=33mm,
            minimum height=33mm,
        ] {close\\event\\happened\\?};

        \node (close) [
            proc,
            left=of closeEvent,
            align=center,
        ] {Close\\the socket};

        \node (newBinary) [
            dec,
            diamond,
            right=of newMessage,
            align=center,
        ] {New\\binary blob\\received?};

        \node (normal) [
            dec,
            align=center,
            diamond,
            above=of newBinary,
            minimum width=33mm,
            minimum height=33mm,
        ] {Operating in\\normal mode?};

        \node (requestNew) [
            proc,
            right=of normal,
            align=center,
        ] {Request a\\new frame};

        \node (logText) [
            proc,
            below=of newBinary,
            align=center,
        ] {Log the\\text message};

        \node (traceCalc) [
            proc,
            right=of newBinary,
            align=center,
        ] {Calculate metrics\\of the signal};

        \node (traceState) [
            stor,
            right=of traceCalc,
            align=center,
        ] {TraceState};

        \node (traceDraw) [
            proc,
            above=of traceState,
            align=center,
        ] {Draw\\the trace};

        \node (scopeDraw) [
            proc,
            above=of traceDraw,
            align=center,
        ] {Draw\\the scope};

        \node (scopeState) [
            stor,
            above=of scopeDraw,
            align=center,
        ] {ScopeState};

        \node (network) [
            circ,
            left=of scopeState,
            align=center,
        ] {Network};

        \node (sourceState) [
            stor,
            left=2cm of network,
            align=center,
        ] {Source State};

        \node (prefPane) [
            circ,
            right=of traceState,
            align=center,
        ] {PrefPane};

        \node (userInput) [
            sign,
            above=of prefPane,
            align=center,
        ] {User Input};

        \node (translateInput) [
            proc,
            above=5cm of userInput,
            align=center,
        ] {translate};
        
    \end{scope}

    \begin{scope}[
            rounded corners,
            every path/.append style={draw=q1,},
            >=latex',
    ]
        \draw[-latex] (eventLoop) -- (event);
        \draw[-latex] (event) -- (openEvent);
        \draw[-latex] (openEvent) -- node[midway,anchor=south] {yes} (sourceState);
        \draw[-latex] (openEvent) -- node[midway,anchor=west] {no} (newMessage);
        \draw[-latex] (newMessage) -- node[midway,anchor=west] {no} (closeEvent);
        \draw[-latex] (closeEvent) -- node[midway,anchor=south] {yes} (close);
        \draw[-latex] (closeEvent) edge[bend left] node[midway,anchor=east] {no} (eventLoop);

        \draw[-latex] (scopeDraw) edge[loop left] (scopeDraw);
        \draw[-latex] (scopeDraw) -- (traceDraw);

        \draw[-latex] (newMessage) -- node[midway,anchor=south] {yes} (newBinary);
        \draw[-latex] (newBinary) -- node[midway,anchor=west] {no} (logText);

        \draw[-latex] (newBinary) -- node[midway,anchor=south] {yes} (traceCalc);
        \draw[-latex] (newBinary) -- node[midway,anchor=west] {yes} (normal);
        \draw[-latex] (normal) -- node[midway,anchor=south] {yes} (requestNew);

        \draw[-latex] (requestNew) edge[bend right] node[midway,anchor=south] {yes} (network);
        
        \draw[-latex] (traceState) -- (traceCalc);
        \draw[-latex] (traceCalc) -- (traceState);

        \draw[-latex] (traceState) -- (traceDraw);
        \draw[-latex] (traceDraw) -- (traceState);

        \draw[-latex] (traceState) -- (prefPane);
        \draw[-latex] (prefPane) -- (traceState);

        \draw[-latex] (userInput) -- (prefPane);

        \draw[-latex] (translateInput) edge[bend right] (scopeState);
        \draw[-latex] (translateInput) edge[bend right] (sourceState);
        \draw[-latex] (userInput) -- (translateInput);

        \draw[-latex] (scopeState) -- (scopeDraw);
        \draw[-latex] (scopeDraw) -- (scopeState);

        \draw[-latex] (network) edge[bend right] (event);

        \draw[-latex] (sourceState) -- (normal);
        \draw[-latex] (sourceState) -- (network);

    \end{scope}

\end{tikzpicture}