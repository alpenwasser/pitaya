\tikzsetnextfilename{gui-eventloop}
\begin{tikzpicture}[%
        align=center,
        node distance=5mm,
        %text=q1,
        %draw=sq5,
    ]
    \scriptsize
    \sffamily

    \begin{scope}[
        every node/.style = draw,
        sign/.style={
            inner sep=2mm,
            rounded corners=1mm,
            fill=q6,
            minimum width=20mm,
            minimum height=15mm,
            %fill=sq5,
            %text=q1,
        },         % custom signal style
        circ/.style={
            %inner sep=2mm,
            rounded corners=1mm,
            double,
            fill=dv-2,
            %draw=q1,
            %text=q1,
            minimum width=20mm,
            minimum height=15mm,
        }, % circuitry
        proc/.style={
            %inner sep=2mm,
            rounded corners=1mm,
            fill=sq3,
            %fill=sq5,
            %text=q1,
        },       % process/activity
        dec/.style={
            %inner sep=2mm,
            rounded corners=1mm,
            fill=br1,
            %fill=sq5,
            %text=q1,
            %minimum width=33mm,
            %minimum height=33mm,
        },       % decision/activity
        stor/.style={
            fill=q4,
            rounded corners=1mm,
            minimum width=20mm,
            minimum height=15mm,
            %minimum width=24mm,
            %minimum height=24mm
        },         % storage
    ]
        \node (newMessage) [
            dec,
            diamond,
            align=center,
        ] at (0,0) {New\\message\\received?};

        \node (openEvent) [
            dec,
            align=center,
            diamond,
            above=of newMessage,
            %minimum width=33mm,
            %minimum height=33mm,
        ] {open\\event\\happened\\?};

        \node (event) [
            proc,
            above=of openEvent,
            align=center,
        ] {New event};

        \node (eventLoop) [
            circ,
            left=of event,
            align=center,
        ] {Event Loop};

        \node (closeEvent) [
            dec,
            align=center,
            diamond,
            below=of newMessage,
            %minimum width=33mm,
            %minimum height=33mm,
        ] {close\\event\\happened\\?};

        \node (sourceState) [
            stor,
            %left=of network,
            right=of openEvent,
            align=center,
            xshift=-1.0mm,
        ] {Source State};

        \node (normal) [
            dec,
            align=center,
            diamond,
            %above=of newBinary,
            %minimum width=33mm,
            %minimum height=33mm,
            %below=of sourceState,
            right=of newMessage,
        ] {Operating in\\normal mode?};

        \node (requestNew) [
            proc,
            right=of normal,
            align=center,
        ] {Request a\\new frame};

        \node (newBinary) [
            dec,
            diamond,
            below=of normal,
            align=center,
        ] {New\\binary blob\\received?};

        \node (close) [
            proc,
            %right=of closeEvent,
            left=of closeEvent,
            align=center,
        ] {Close\\the socket};

        \node (logText) [
            proc,
            below=of newBinary,
            align=center,
        ] {Log the\\text message};

        \node (traceCalc) [
            proc,
            right=of newBinary,
            align=center,
        ] {Calculate metrics\\of the signal};

        \node (traceState) [
            stor,
            right=of traceCalc,
            align=center,
        ] {TraceState};

        \node (traceDraw) [
            proc,
            above=of traceState,
            align=center,
        ] {Draw\\the trace};

        \node (scopeDraw) [
            proc,
            above=of traceDraw,
            align=center,
        ] {Draw\\the scope};

        \node (scopeState) [
            stor,
            above=of scopeDraw,
            align=center,
        ] {ScopeState};

        \node (network) [
            circ,
            %left=of scopeState,
            above=of sourceState,
            align=center,
            %xshift=-5mm,
        ] {Network};

        \node (prefPane) [
            circ,
            below=of traceState,
            align=center,
        ] {PrefPane};

        \node (userInput) [
            sign,
            above=of scopeState,
            align=center,
        ] {User Input};

        \node (translateInput) [
            proc,
            left=of userInput,
            align=center,
        ] {translate};
        
    \end{scope}

    \begin{scope}[
            rounded corners,
            %every path/.append style={draw=q1,},
            >=latex',
    ]
        \draw[-latex] (eventLoop) -- (event);
        \draw[-latex] (event) -- (openEvent);
        \draw[-latex] (openEvent) -- node[midway,anchor=south] {yes} (sourceState);
        \draw[-latex] (openEvent) -- node[midway,anchor=west] {no} (newMessage);
        \draw[-latex] (newMessage) -- node[midway,anchor=west] {no} (closeEvent);
        \draw[-latex] (closeEvent) -- node[midway,anchor=south] {yes} (close);
        \draw[-latex] (closeEvent.south) 
            -- ($(closeEvent.south) + (0,-7mm)$)
            -| node[midway,anchor=east] {no} ($(eventLoop.west) + (-5mm,0)$)
            -- (eventLoop.west);

        \draw[-latex] (scopeDraw) edge[loop left] (scopeDraw);
        \draw[-latex] (scopeDraw) -- (traceDraw);

        \draw[-latex] (newMessage) -- node[midway,anchor=south west] {yes} (newBinary);
        \draw[-latex] (newBinary) -- node[midway,anchor=west] {no} (logText);

        \draw[-latex] (newBinary) -- node[midway,anchor=south] {yes} (traceCalc);
        \draw[-latex] (newBinary) -- node[midway,anchor=west] {yes} (normal);
        \draw[-latex] (normal) -- node[midway,anchor=south] {yes} (requestNew);

        \draw[-latex] (requestNew.north) |- node[midway,anchor=south] {yes} (network.east);
        
        \draw[-latex] (traceState) -- (traceCalc);
        \draw[-latex] (traceCalc) -- (traceState);

        \draw[-latex] (traceState) -- (traceDraw);
        \draw[-latex] (traceDraw) -- (traceState);

        \draw[-latex] (traceState) -- (prefPane);
        \draw[-latex] (prefPane) -- (traceState);

        \draw[-latex] (userInput) -| ($(prefPane.east) + (5mm,0)$) -- (prefPane.east);

        \draw[-latex] ($(translateInput.south) + (+1.5mm,0)$) |- (scopeState);
        \draw[-latex] ($(translateInput.south) + (-1.5mm,0)$) |- (sourceState);
        \draw[-latex] (userInput) -- (translateInput);

        \draw[-latex] (scopeState) -- (scopeDraw);
        \draw[-latex] (scopeDraw) -- (scopeState);

        \draw[-latex] ($(network.west) + (0,-1.40mm)$) -- (event);

        \draw[-latex] ($(sourceState.south) + (1.5mm,0)$) -- (normal);
        \draw[-latex] (sourceState) -- (network);

        \draw[-latex] (close) |- ($(openEvent.south) + (0,-1.0mm)$) -| ($(sourceState.south) + (-1.5mm,0)$);

    \end{scope}

\end{tikzpicture}
