\tikzsetnextfilename{server-eventloop}
\begin{tikzpicture}[%
        align=center,
        node distance=5mm,
        %text=q1,
        %draw=sq5,
    ]
    \scriptsize
    \sffamily

    \begin{scope}[
        every node/.style = draw,
        sign/.style={
            %inner sep=2mm,
            rounded corners=1mm,
            %fill=sq5,
            %text=q1,
        },         % custom signal style
        circ/.style={
            fill=dv-2,
            minimum width=20mm,
            minimum height=15mm,
            %inner sep=2mm,
            rounded corners=1mm,
            double,
            %fill=sq5,
            %draw=q1,
            %text=q1,
            %minimum width=24mm,
            %minimum height=24mm
        }, % circuitry
        proc/.style={
            rounded corners=1mm,
            fill=sq3,
            %inner sep=2mm,
            %rounded corners=1mm,
            %fill=sq5,
            %text=q1,
        },       % process/activity
        dec/.style={
            rounded corners=1mm,
            fill=br1,
            %inner sep=2mm,
            %rounded corners=1mm,
            %fill=sq5,
            %text=q1,
        },       % decision/activity
        stor/.style={
            fill=q4,
            rounded corners=1mm,
            minimum width=20mm,
            minimum height=15mm,
            %fill=cyan!30,
            %minimum width=24mm,
            %minimum height=24mm
        },         % storage
    ]
        \node (openEvent) [
            dec,
            align=center,
            diamond,
            %minimum width=33mm,
            %minimum height=33mm,
        ] at (0,0) {open\\event\\happened\\?};
        \node (event) [
            proc,
            above=of openEvent,
            align=center,
        ] {New event};
        \node (eventLoop) [
            circ,
            above left=of event,
            align=center,
        ] {Event Loop};
        \coordinate[left=of eventLoop] (eventLoopHelp);
        \node (messageEvent) [
            dec,
            align=center,
            diamond,
            below=of openEvent,
            %minimum width=33mm,
            %minimum height=33mm,
        ] {message\\event\\happened\\?};
        \node (closeEvent) [
            dec,
            align=center,
            diamond,
            below=of messageEvent,
            %minimum width=33mm,
            %minimum height=33mm,
        ] {close\\event\\happened\\?};
        \node (open) [
            proc,
            above right=of openEvent,
            align=center,
        ] {Open a new socket};
        \node (prevSock) [
            dec,
            align=center,
            diamond,
            above right=of open,
            %minimum width=33mm,
            %minimum height=33mm,
        ] {Currently\\opened socket?};
        \node (close2) [
            proc,
            right=of prevSock,
            align=center,
        ] {Close\\the socket};
        \node (parse) [
            proc,
            above right=of messageEvent,
            align=center,
        ] {Parse the request};
        \node (close) [
            proc,
            below=of closeEvent,
            align=center,
        ] {Close\\the socket};
        \node (recordingRequest) [
            dec,
            align=center,
            diamond,
            above right=of parse,
            %minimum width=33mm,
            %minimum height=33mm,
        ] {A new\\recording is\\requested?};
        \node (readRequest) [
            dec,
            align=center,
            diamond,
            below=of recordingRequest,
            %minimum width=33mm,
            %minimum height=33mm,
        ] {A frame\\is requested?};
        \node (configureRequest) [
            dec,
            align=center,
            diamond,
            below=of readRequest,
            %minimum width=33mm,
            %minimum height=33mm,
        ] {A configuration\\is issued?};
        \node (recording) [
            proc,
            right=of recordingRequest,
            align=center,
        ] {Start a new\\recording with\\the kernel module};
        \coordinate[below=10mm of recording] (stateRecordingHelp);
        \node (read) [
            proc,
            right=of readRequest,
            align=center,
        ] {Store\\read request\\in state};
        \node (state) [
            stor,
            right=of read,
            align=center,
        ] {State};
        \node (configure) [
            proc,
            right=of configureRequest,
            align=center,
        ] {Add configuration to state};
        \coordinate[above=10mm of configure] (configureStateHelp);
        \node (discard) [
            proc,
            below=of configureRequest,
            align=center,
        ] {Discard request};

        % --------------- T I M E R ------------------- %

        \node (timer) [
            circ,
            align=center,
            below=of configure,
        ] {Timer};
        \node (timerPreDescision) [
            dec,
            align=center,
            diamond,
            below=of timer,
            %minimum width=33mm,
            %minimum height=33mm,
        ] {A new frame\\was requested?};
        \node (timerCheck) [
            proc,
            below=of timerPreDescision,
            align=center,
        ] {Check for trigger\\with the kernelmodule};
        \node (timerDescision) [
            dec,
            align=center,
            diamond,
            left=of timerCheck,
            %minimum width=33mm,
            %minimum height=33mm,
        ] {Logger running?};
        \node (data) [
            proc,
            left=of timerDescision,
            align=center,
        ] {Send data to network};

        \node (kernelmodule) [
            circ,
            %below right=of recording,
            below=of timerCheck,
            align=center,
            yshift=-7mm,
            %xshift=2mm,
        ] {Kernel Module};

        \node (network) [
            circ,
            left=of data,
            align=center,
            %anchor=south,
            %xshift=2mm,
        ] {Network};
    \end{scope}

    \begin{scope}[
            rounded corners=1mm,
            %every path/.append style={draw=q1,},
            >=latex',
    ]
        \draw[-latex] (eventLoop.east) -| (event.north);
        \draw[-latex] (event) -- (openEvent);
        \draw[-latex] (openEvent) -| node[midway,anchor=south east] {yes} (open);
        \draw[-latex] (openEvent) -- node[midway,anchor=west] {no} (messageEvent);
        \draw[-latex] (messageEvent) -| node[midway,anchor=south east] {yes} (parse);
        \draw[-latex] (messageEvent) -- node[midway,anchor=west] {no} (closeEvent);
        \draw[-latex] (closeEvent) -- node[midway,anchor=west] {yes} (close);
        %\draw[-latex] (closeEvent) edge[bend left] node[midway,anchor=east] {no} (eventLoop);
        %\draw[-latex] (closeEvent) -| node[midway,anchor=south west] {no} (eventLoopHelp) -- (eventLoop.west);
        \draw[-latex] (closeEvent) -| node[midway,anchor=south west] {no} (eventLoop.south);

        \draw[-latex] (prevSock) -- node[midway,anchor=south] {yes} (close2);
        \draw[-latex] (parse) |- (recordingRequest);
        \draw[-latex] (recordingRequest) -- node[midway,anchor=south] {yes} (recording);
        \draw[-latex] (recordingRequest) -- node[midway,anchor=west] {no} (readRequest);
        \draw[-latex] (readRequest) -- node[midway,anchor=south] {yes} (read);
        \draw[-latex] (readRequest) -- node[midway,anchor=west] {no} (configureRequest);
        \draw[-latex] (configureRequest) -- node[midway,anchor=south] {yes} (configure);
        \draw[-latex] (configureRequest) -- node[midway,anchor=west] {no} (discard);

        %\draw[-latex] (recording.east) -| ($(kernelmodule.north) + (-4mm,0)$);
        \draw[-latex] (recording.east) -- ($(recording.east) + (26mm,0)$) |- (kernelmodule.east);
        \draw[-latex] (open) |- (prevSock);
        \draw[-latex] (state) |- (stateRecordingHelp) -- (recording);
        \draw[-latex] (read) -- (state);
        \draw[-latex] (configure) -- (configureStateHelp) -| (state);

        \draw[-latex] (state.east) -- ($(state.east) + (3mm,0)$) |- (timerPreDescision.east);
        \draw[-latex] (timer) -- (timerPreDescision);
        \draw[-latex] (timerPreDescision) -- (timerCheck);
        %\draw[-latex] (kernelmodule) |- ($(timerDescision.south) + (0,-5mm)$) -- (timerDescision.south);
        \draw[-latex] (kernelmodule) -| (timerDescision.south);
        \draw[-latex] (timerCheck) -- (timerDescision);
        \draw[-latex] (timerDescision) -- node[midway,anchor=south] {yes} (data);
        %\draw[-latex] (data.south) -- ($(data.south) + (0,-17mm)$) -| (network.south);
        \draw[-latex] (data) -- (network);
        %\draw[-latex] (network) |- ($(eventLoop.north) + (0,5mm)$) -- (eventLoop.north) ;
        \draw[-latex] (network) -| (eventLoopHelp) -- (eventLoop.west);

    \end{scope}
\end{tikzpicture}
